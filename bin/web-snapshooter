#!/usr/bin/env ruby
#
# WebSnapShooter
#
# Copyright (C) 2011 Jose Fernandez
#
# Based in some code from Mirko Maischberger
#
require 'optparse'
require 'rubygems'
begin
require 'webkit-gtk'
rescue Gtk::InitError
end
require 'timeout'
require 'uri'

ARGS = ARGV.clone
# I use a base class cause I want to implement it with two engines (gecko and webkit)
class WebSnapshooter < Gtk::Window
  # It receives a hash with the different options
  # :uri          => The uri that is going to be rendered
  # :browser_size => An array with the browser size [width,height]
  # :output_size  => An array with the output size [width,height]
  # :output_file  => The name of the output file (it is going to be rewritten)
  def initialize(options)
    super()
    @options = options
    self.border_width = 0
    self.resize(@options[:browser_size][0], @options[:browser_size][1]) if @options[:browser_size]
  end

  def screenshot
    sleep @options[:delay] if @options[:delay]
    gdkw = self.child.parent_window
    x, y, width, height, depth = gdkw.geometry
    cairo_context = gdkw.create_cairo_context
    surface = cairo_context.target
    if @options[:output_size]
      surface = scale(surface, gdkw.width, gdkw.height, @options[:output_size][0], @options[:output_size][1])
    end
    surface.write_to_png(@options[:output_file])
  end


  def scale(surface, source_width, source_height, target_width, target_height)
    new_surface = surface.create_similar(target_width, target_height)
    cairo_context = Cairo::Context.new(new_surface)
    cairo_context.scale(target_width.to_f / source_width, target_height.to_f / source_height)
    cairo_context.set_source(surface)
    cairo_context.paint
    return new_surface
  end

  def on_net_stop
    GLib::Timeout.add(1000) do
      screenshot
      Gtk.main_quit
    end
  end


end

def default_size_from_options(options)
    options[:browser_size] || options[:output_size]
end

class WebkitSnapshooter < WebSnapshooter
  def initialize(opts)
    super
    self << WebKitGtk::WebView.new
    if default_size = default_size_from_options(@options) 
      self.set_default_size(default_size[0], default_size[1])
    end
    self.child.open(@options[:uri])
    self.child.signal_connect("load_finished") do
      on_net_stop
    end

    self.show_all
  end
end

def array_to_dimensions(array)
  array.join("x")
end

def dimensions_to_array(dimension)
  aux = dimension.downcase.split("x").map(&:to_i)
  if aux.size == 2 && aux[0] > 0 && aux[1] > 0
    return aux
  else
    return nil
  end
end

options = {:engine => "webkit"}
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: web-snapshooter [options]"

  opts.on("-u", "--uri URI", "The uri you want to take the spanshot from") do |u|
    options[:uri] = u
    begin
      URI.parse(u)
    rescue URI::InvalidURIError
      puts "Invalid uri specified"
    end
  end

  opts.on("-d", "--delay SECS", "How long do you want to wait until the snapshot is made (note that this delay is after the timeout or the page load)") do |d|
    options[:delay] = d.to_i
  end

  opts.on("-f","--force", "Overwrite output") do |f|
    options[:force] = true
  end

  opts.on("-o", "--output-file FILE", "The output file") do |o|
    options[:output_file] = o
  end

  opts.on("", "--browser-size WIDTHxHEIGHT", "The size of the 'fake' browser that is going to be used to capture the snapshot, if not specified auto resize will be used instead") do |bs|
    options[:browser_size] = dimensions_to_array(bs)
  end

  opts.on("", "--output-size WIDTHxHEIGHT", "The size of the output file, if not specified the browser size will be used instead") do |os|
    options[:output_size] = dimensions_to_array(os)
  end

  opts.on("-x", "--xvfb", "Use xvfb-run (this is needed if you have no X server or don't want to use it)") do  |x|
    options[:xvfb] = true
  end

  opts.on("-t", "--timeout TIMEOUT", "timeout for the request") do |t|
    options[:timeout] = t.to_i
  end

end
option_parser.parse!

begin
  if File.stat(options[:output_file].to_s) && ! options[:force]
    puts "The output file already exist, please specify another name or force with -f"
    exit 1
  end
rescue Errno::ENOENT
end

if options[:uri].to_s.empty?
  puts "Error, no uri specified"
  puts option_parser.help
  exit 1
end

if options[:output_file].to_s.empty?
  puts "An ouput file has to be specified"
  puts option_parser.help
  exit 1
end


def make_args_from_options(opts)
  aux = " --uri='#{opts[:uri]}' --output-file=#{opts[:output_file]} "
  aux += opts[:output_size] ? " --output-size=#{array_to_dimensions(opts[:output_size])}" : ""
  aux += opts[:browser_size] ? "--browser-size=#{array_to_dimensions(opts[:browser_size])}" : ""
  aux += opts[:force] ? " -f " : ""
  aux += opts[:timeout] ? " --timeout=#{opts[:timeout]} " : ""
  aux += opts[:delay] ? " --delay=#{opts[:delay]} " : ""
  return aux
end

if options[:xvfb]
  default_size = default_size_from_options(options) || [1000,1000]
  command = "xvfb-run -a --server-args=\"-screen 0 #{array_to_dimensions(default_size)}x24\" " + __FILE__ + make_args_from_options(options)
  if RUBY_VERSION < '1.9'
    exec(command)# + "> /dev/null 2>&1")
  else
    exec(command)#,:err => "/dev/null",:out => "/dev/null")
  end
end

# We make the require here cause we had to create the X server before
snapshooter  = WebkitSnapshooter.new(options)
Gtk.init

if options[:timeout]
  Gtk::timeout_add(options[:timeout]*1000) do
    snapshooter.screenshot
    Gtk.main_quit
  end
end

Gtk.main
